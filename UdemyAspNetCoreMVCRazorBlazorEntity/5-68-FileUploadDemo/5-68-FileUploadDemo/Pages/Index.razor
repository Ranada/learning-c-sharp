@page "/";
@using _5_68_FileUploadDemo.Services;
@inject IFileUpload fileUpload;

<div class="col-6">
    <h1 class="mb-4">File Upload in Blazor</h1>
    <div class="form-group mb-1">
        <InputFile OnChange="OnInputFileChange" multiple class="mb-2" />
        <button class="btn btn-sm btn-success" type="button" @onclick="UploadFiles">Upload</button>
    </div>
    @{
        var progressCSS = "progress" + (displayProgress? "" : " d-none");
    }
    <div class="@progressCSS">
        <div class="progress-bar" style="width: @uploadPercent%" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="@uploadPercent">
            @uploadPercent"%"
        </div>
    </div>
    <div>
        <label>@labelText</label>
    </div>
</div>
@if (previewImages.Count > 0)
{
    <h3>Selected Files</h3>    
    <div class="card">
        <div class="row align-items-start">
            @foreach (var item in previewImages)
            {
                <div class="col-2">
                    <img class="rounded float-left" src="@item" width="100" height="100">
                </div>
            }
        </div>
    </div>
}

@code {
    IReadOnlyList<IBrowserFile> selectedFiles;
    private IList<string> previewImages = new List<string>();

    private string labelText = "";
    private bool displayProgress = false;
    private int uploadPercent = 0;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = new List<IBrowserFile>();
        selectedFiles = e.GetMultipleFiles();
        foreach (var file in selectedFiles)
        {
            var imageUrl = await fileUpload.GeneratePreviewUrl(file);
            previewImages.Add(imageUrl);
        }
    }

    private async Task UploadFiles()
    {
        try
        {
            if (selectedFiles is not null && selectedFiles.Count > 0)
            {
                displayProgress = true;
                int filesUploaded = 0;

                labelText = $"{filesUploaded} of {selectedFiles.Count}";

                foreach (var file in selectedFiles)
                {
                    await fileUpload.UploadFile(file);
                    filesUploaded += 1;
                    uploadPercent = (int)((filesUploaded / (double)selectedFiles.Count) * 100);
                    labelText = $"{filesUploaded} of {selectedFiles.Count}";
                }

            }
        } catch (Exception ex)
        {
            labelText = $"Upload failed due to -> {ex.Message}";    
        }
    }
}